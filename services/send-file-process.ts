import axios from 'axios';
import config from '../env-config';
import { withAuth } from './with-auth';
import { loginStore } from '../stores/login';

/**
 * File sending architecture as follows:
 * 1) Request signed fields from backend
 * 2) Send file directly from browser to S3 with help of signed fields providing access
 * 3) Initiate web-socket connection with backend
 * 4) Send message that file was uploaded and ready for processing
 * 5) Wait for response message when processing is finished
 * Why:
 * 1) Browser sends entire file to S3 directly, less load on backend
 * 2) Access control still working
 * 3) Client is notified when image processing is finished => refresh page
 */

export default class SendFileProcess {
  private request: XMLHttpRequest;

  private socket: WebSocket;

  private isAborted: boolean = false;

  private onProgressCallback: Function;

  private onFinishCallback: Function;

  private onFailCallback: Function;

  private s3Key: string;

  setOnProgress(onProgress) {
    this.onProgressCallback = onProgress;
    return this;
  }

  setOnFinish(onFinish) {
    this.onFinishCallback = onFinish;
    return this;
  }

  setOnFail(onFail) {
    this.onFailCallback = onFail;
    return this;
  }

  abort() {
    this.isAborted = true;
    if (this.request) {
      this.request.abort();
    }
    if (this.socket) {
      this.socket.close();
    }
  }

  commit(file) {
    this.load(file)
      .catch((e) => {
        this.onFailCallback(e);
      });
  }

  private async load(file) {
    this.request = new XMLHttpRequest();
    this.request.onload = () => {
      this.handleRequestFinish();
    };
    this.request.upload.onprogress = (e) => {
      this.onProgressCallback(e.lengthComputable, e.loaded, e.total);
    };
    // onprogress binding absolutely must go before open
    this.request.open('POST', `${config.s3Address}/image-uploads`);
    // File is sent along with extra data from S3
    const requestData = new FormData();
    requestData.append('file', file);
    // S3 reads Content-Type from body form field instead of header -- dictated by S3 design
    requestData.append('Content-Type', file.type);

    // Get signed fields to authorize request with them
    const { data: imageUploadFields } = await withAuth(axios)
      .get(`${config.backendAddress}/image-uploads/get-image-upload-fields/`);
    // Populate request data for sending with signed fields
    Object.keys(imageUploadFields).forEach((key) => {
      requestData.append(key, imageUploadFields[key]);
    });
    // S3Key is generated by backend
    this.s3Key = imageUploadFields.key;

    // Check that user didn't press abort button before we got signed fields from backend
    if (!this.isAborted) {
      this.request.send(requestData);
    }
  }

  private async handleRequestFinish() {
    try {
      if (this.request.status >= 200 && this.request.status < 300) {
        await this.handlePostProcessing();
        this.onFinishCallback();
      } else {
        throw new Error('Error uploading image');
      }
    } catch (e) {
      console.error(e);
      this.onFailCallback();
    }
  }

  private async handlePostProcessing(): Promise<void> {
    return new Promise((resolve, reject) => {
      if (this.isAborted) {
        resolve();
        return;
      }
      this.socket = new WebSocket(config.wsBackendAddress);
      this.socket.onopen = () => {
        const eventName = 'image-processing';
        const authToken = loginStore.getState().token;
        const initMessage = {
          event: eventName,
          data: { authToken, s3Key: this.s3Key },
        };
        this.socket.onmessage = (responseEvent) => {
          const { data } = JSON.parse(responseEvent.data);
          if (data.isSuccess) {
            resolve();
          } else {
            reject();
          }
          this.socket.close();
        };
        this.socket.send(JSON.stringify(initMessage));
      };
    });
  }
}
